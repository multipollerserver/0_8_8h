diff -ruBbd poller.php plugins/multipollerserver/patches/poller.php
--- poller.php	2016-02-07 20:26:54.000000000 +0100
+++ plugins/multipollerserver/patches/poller.php	2016-07-17 15:30:44.000000000 +0200
@@ -1,4 +1,5 @@
 <?php
+#Multipollerserver_checksumm=cacti_088h_multipollerserver_088h
 /*
  +-------------------------------------------------------------------------+
  | Copyright (C) 2004-2016 The Cacti Group                                 |
@@ -21,28 +22,36 @@
  | http://www.cacti.net/                                                   |
  +-------------------------------------------------------------------------+
 */
+/* require used functions */
+require_once("plugins/multipollerserver/functions.php"); #0.2.2a
 
 /* tick use required as of PHP 4.3.0 to accomodate signal handling */
 declare(ticks = 1);
 
 function sig_handler($signo) {
+
+/* pollerserver_id */
+	$server_remote_name = gethostname();  
+	$poller_server_id = check_backuppollerserver($server_remote_name); #0.2.2a
+
+
 	switch ($signo) {
 		case SIGTERM:
 		case SIGINT:
-			cacti_log("WARNING: Cacti Master Poller process terminated by user", TRUE);
+			cacti_log("WARNING: Pollerserver: ".$server_remote_name." Cacti Master Poller process terminated by user", TRUE);
 
-			$running_processes = db_fetch_assoc("SELECT * FROM poller_time WHERE end_time='0000-00-00 00:00:00'");
+			$running_processes = db_fetch_assoc("SELECT * FROM poller_time WHERE poller_id = '$poller_server_id' AND end_time='0000-00-00 00:00:00'");
 
 			if (sizeof($running_processes)) {
 			foreach($running_processes as $process) {
 				if (function_exists("posix_kill")) {
-					cacti_log("WARNING: Termination poller process with pid '" . $process["pid"] . "'", TRUE, "POLLER");
+					cacti_log("WARNING: Pollerserver: ".$server_remote_name." Termination poller process with pid '" . $process["pid"] . "'", TRUE, "POLLER");
 					posix_kill($process["pid"], SIGTERM);
 				}
 			}
 			}
 
-			db_execute("TRUNCATE TABLE poller_time");
+			db_execute("DELETE FROM poller_time WHERE poller_id = '$poller_server_id'");
 
 			exit;
 			break;
@@ -102,13 +111,26 @@
 }
 }
 
+/* Check the pollerserver*/
+$server_remote_name = gethostname();
+check_backuppollerserver($server_remote_name); #0.2.2a
+$poller_server_id = array(); #0.2.2a
+$poller_server_id = db_fetch_row("SELECT id, aktive FROM poller_server WHERE name='$server_remote_name'", false);
+
+if ($poller_server_id["id"] == '') {
+	cacti_log("WARNING: Pollerserver: ".$server_remote_name." attempts to poll but is not registered", TRUE, "POLLER");
+	die();
+}elseif (($poller_server_id["id"] <> '') AND ($poller_server_id["aktive"] == '')) {
+	cacti_log("WARNING: Pollerserver: ".$server_remote_name." is disabled ", FALSE, "POLLER");
+	die();
+}
 /* install signal handlers for UNIX only */
 if (function_exists("pcntl_signal")) {
 	pcntl_signal(SIGTERM, "sig_handler");
 	pcntl_signal(SIGINT, "sig_handler");
 }
 
-api_plugin_hook('poller_top');
+if ($poller_server_id["id"] == 2) {api_plugin_hook('poller_top');}
 
 /* record the start time */
 list($micro,$seconds) = explode(" ", microtime());
@@ -119,7 +141,8 @@
 $poller_interval = read_config_option("poller_interval");
 
 /* retreive the last time the poller ran */
-$poller_lastrun = read_config_option('poller_lastrun');
+$poller_lastrun = db_fetch_cell("SELECT poller_lastrun FROM poller_server WHERE id=".$poller_server_id['id']."");
+#$poller_lastrun = read_config_option('poller_lastrun');
 
 /* get the current cron interval from the database */
 $cron_interval = read_config_option("cron_interval");
@@ -137,11 +160,11 @@
 /* assume a scheduled task of either 60 or 300 seconds */
 if (isset($poller_interval)) {
 	$poller_runs       = intval($cron_interval / $poller_interval);
-	$sql_where = "  WHERE rrd_next_step<=0 ";
+	$sql_where = "  WHERE rrd_next_step<=0 AND poller_id=".$poller_server_id['id']."";
 
 	define("MAX_POLLER_RUNTIME", $poller_runs * $poller_interval - 2);
 }else{
-	$sql_where = "";
+	$sql_where = " poller_id=".$poller_server_id['id']."";
 	$poller_runs       = 1;
 	define("MAX_POLLER_RUNTIME", 298);
 }
@@ -178,7 +201,7 @@
 		$poller_seconds_sincerun = $seconds - $poller_lastrun;
 	}
 
-	cacti_log("NOTE: Poller Int: '$poller_interval', $task_type Int: '$cron_interval', Time Since Last: '$poller_seconds_sincerun', Max Runtime '" . MAX_POLLER_RUNTIME. "', Poller Runs: '$poller_runs'", TRUE, "POLLER");;
+	cacti_log("NOTE: Pollerserver: ".$server_remote_name." Poller Int: '$poller_interval', $task_type Int: '$cron_interval', Time Since Last: '$poller_seconds_sincerun', Max Runtime '" . MAX_POLLER_RUNTIME. "', Poller Runs: '$poller_runs'", TRUE, "POLLER");;
 }
 
 /* our cron can run at either 1 or 5 minute intervals */
@@ -193,7 +216,7 @@
 	/* give the user some flexibility to run a little moe often */
 	if ((($seconds - $poller_lastrun)*1.3) < MAX_POLLER_RUNTIME) {
 		if (read_config_option('log_verbosity') >= POLLER_VERBOSITY_MEDIUM || $debug) {
-			cacti_log("NOTE: $task_type is configured to run too often!  The Poller Interval is '$poller_interval' seconds, with a minimum $task_type period of '$min_period' seconds, but only " . ($seconds - $poller_lastrun) . ' seconds have passed since the poller last ran.', true, 'POLLER');
+			cacti_log("NOTE: Pollerserver: ".$server_remote_name." $task_type is configured to run too often!  The Poller Interval is '$poller_interval' seconds, with a minimum $task_type period of '$min_period' seconds, but only " . ($seconds - $poller_lastrun) . ' seconds have passed since the poller last ran.', true, 'POLLER');
 		}
 		exit;
 	}
@@ -201,10 +224,10 @@
 
 /* check to see whether we have the poller interval set lower than the poller is actually ran, if so, issue a warning */
 if ((($seconds - $poller_lastrun - 5) > MAX_POLLER_RUNTIME) && ($poller_lastrun > 0)) {
-	cacti_log("WARNING: $task_type is out of sync with the Poller Interval! The Poller Interval is '$poller_interval' seconds, with a maximum of a '$min_period' second $task_type, but " . ($seconds - $poller_lastrun) . ' seconds have passed since the last poll!', true, 'POLLER');
+	cacti_log("WARNING: Pollerserver: ".gethostname()." $task_type is out of sync with the Poller Interval!  The Poller Interval is '$poller_interval' seconds, with a maximum of a '$min_period' second $task_type, but " . ($seconds - $poller_lastrun) . ' seconds have passed since the last poll!', true, 'POLLER');
 }
 
-db_execute("REPLACE INTO settings (name,value) VALUES ('poller_lastrun'," . $seconds . ')');
+db_execute("UPDATE poller_server SET poller_lastrun = '$seconds' WHERE id = ".$poller_server_id['id']."");
 
 /* let PHP only run 1 second longer than the max runtime, plus the poller needs lot's of memory */
 ini_set("max_execution_time", MAX_POLLER_RUNTIME + 1);
@@ -212,7 +235,7 @@
 
 $poller_runs_completed = 0;
 $poller_items_total    = 0;
-$polling_hosts         = array_merge(array(0 => array("id" => "0")), db_fetch_assoc("SELECT id FROM host WHERE disabled='' ORDER BY id"));
+$polling_hosts         = array_merge(array(0 => array("id" => "0")), db_fetch_assoc("SELECT id FROM host WHERE poller_id = ".$poller_server_id['id']." AND disabled='' ORDER BY id "));
 
 while ($poller_runs_completed < $poller_runs) {
 	/* record the start time for this loop */
@@ -243,14 +266,19 @@
 	$max_threads = read_config_option("max_threads");
 
 	/* initialize poller_time and poller_output tables, check poller_output for issues */
-	$running_processes = db_fetch_cell("SELECT count(*) FROM poller_time WHERE end_time='0000-00-00 00:00:00'");
+	$running_processes = db_fetch_cell("SELECT count(*) FROM poller_time WHERE poller_id = ".$poller_server_id['id']." AND end_time='0000-00-00 00:00:00'");
 	if ($running_processes) {
-		cacti_log("WARNING: There are '$running_processes' detected as overrunning a polling process, please investigate", TRUE, "POLLER");
+		cacti_log("WARNING: Pollerserver: ".$server_remote_name." There are '$running_processes' detected as overrunning a polling process, please investigate", TRUE, "POLLER");
 	}
-	db_execute("TRUNCATE TABLE poller_time");
+	db_execute("DELETE FROM poller_time WHERE poller_id = ".$poller_server_id['id']."");
+
 
 	$issues_limit = 20;
-	$issues = db_fetch_assoc("SELECT local_data_id, rrd_name FROM poller_output LIMIT " . ($issues_limit));
+	$issues = db_fetch_assoc ("SELECT DISTINCT poller_output.local_data_id, poller_output.rrd_name,poller_item.poller_id FROM poller_output
+                             INNER JOIN poller_item ON poller_item.local_data_id = poller_output.local_data_id 
+                             WHERE poller_item.poller_id = ".$poller_server_id['id']."");
+	
+	
 	$count = db_fetch_cell("SELECT COUNT(*) FROM poller_output");
 	if (sizeof($issues)) {
 		$issue_list = "";
@@ -262,7 +290,7 @@
 			$issue_list .= ", Additional Issues Remain.  Only showing first $issues_limit";
 		}
 
-		cacti_log("WARNING: Poller Output Table not Empty.  Issues Found: $count, Data Sources: $issue_list", TRUE, "POLLER");
+		cacti_log("WARNING: Pollerserver: ".gethostname()." Poller Output Table not Empty.  Issues Found: $count, Data Sources: $issue_list", TRUE, "POLLER");
 		db_execute("TRUNCATE TABLE poller_output");
 	}
 
@@ -275,14 +303,14 @@
 
 		/* exit poller if spine is selected and file does not exist */
 		if (($poller == "2") && (!file_exists(read_config_option("path_spine")))) {
-			cacti_log("ERROR: The path: " . read_config_option("path_spine") . " is invalid.  Can not continue", true, "POLLER");
+			cacti_log("ERROR: Pollerserver: ".$server_remote_name." The path: " . read_config_option("path_spine") . " is invalid.  Can not continue", true, "POLLER");
 			exit;
 		}
 
 		/* Determine Command Name */
 		if ($poller == "2") {
 			$command_string = read_config_option("path_spine");
-			$extra_args     = "";
+			$extra_args     = "-p ".$poller_server_id['id']."";
 			$method         = "spine";
 			$total_procs    = $concurrent_processes * $max_threads;
 			chdir(dirname(read_config_option("path_spine")));
@@ -298,7 +326,9 @@
 			$total_procs    = $concurrent_processes;
 		}
 
-		$extra_args = api_plugin_hook_function ('poller_command_args', $extra_args);
+		#nur wenn id = 2
+		if ($poller_server_id['id'] == 2) {$extra_args = api_plugin_hook_function ('poller_command_args', $extra_args);}
+
 
 		/* Populate each execution file with appropriate information */
 		foreach ($polling_hosts as $item) {
@@ -364,7 +394,7 @@
 		$rrds_processed = 0;
 		$poller_finishing_dispatched = FALSE;
 		while (1) {
-			$finished_processes = db_fetch_cell("SELECT count(*) FROM poller_time WHERE poller_id=0 AND end_time>'0000-00-00 00:00:00'");
+			$finished_processes = db_fetch_cell("SELECT count(*) FROM poller_time WHERE poller_id=".$poller_server_id['id']." AND end_time>'0000-00-00 00:00:00'");
 
 			if ($finished_processes >= $started_processes) {
 				/* all scheduled pollers are finished */
@@ -375,22 +405,22 @@
 				$rrds_processed = $rrds_processed + process_poller_output($rrdtool_pipe, TRUE);
 
 				log_cacti_stats($loop_start, $method, $concurrent_processes, $max_threads,
-					sizeof($polling_hosts), $hosts_per_process, $num_polling_items, $rrds_processed);
+					sizeof($polling_hosts)-1, $hosts_per_process -1, $num_polling_items, $rrds_processed, $poller_server_id['id']);
 
 				break;
 			}else {
 				if (read_config_option("log_verbosity") >= POLLER_VERBOSITY_MEDIUM || $debug) {
-					print "Waiting on " . ($started_processes - $finished_processes) . " of " . $started_processes . " pollers.\n";
+					print "Pollerserver: ".$server_remote_name." Waiting on " . ($started_processes - $finished_processes) . " of " . $started_processes . " pollers.\n";
 				}
 
 				$rrds_processed = $rrds_processed + process_poller_output($rrdtool_pipe);
 
 				/* end the process if the runtime exceeds MAX_POLLER_RUNTIME */
 				if (($poller_start + MAX_POLLER_RUNTIME) < time()) {
-					cacti_log("Maximum runtime of " . MAX_POLLER_RUNTIME . " seconds exceeded. Exiting.", true, "POLLER");
-					api_plugin_hook_function('poller_exiting');
+					cacti_log("Pollerserver: ".$server_remote_name." Maximum runtime of " . MAX_POLLER_RUNTIME . " seconds exceeded. Exiting.", true, "POLLER");
+					if ($poller_server_id['id'] == 2) {api_plugin_hook_function('poller_exiting');}
 					log_cacti_stats($loop_start, $method, $concurrent_processes, $max_threads,
-						sizeof($polling_hosts), $hosts_per_process, $num_polling_items, $rrds_processed);
+						sizeof($polling_hosts), $hosts_per_process, $num_polling_items, $rrds_processed, $poller_server_id['id']);
 
 					break;
 				}else{
@@ -425,7 +455,7 @@
 			chdir(read_config_option("path_webroot"));
 		}
 	}else if (read_config_option('log_verbosity') >= POLLER_VERBOSITY_MEDIUM || $debug) {
-		cacti_log("NOTE: There are no items in your poller for this polling cycle!", TRUE, "POLLER");
+		cacti_log("NOTE: Pollerserver: ".$server_remote_name." NOTE: There are no items in your poller for this polling cycle!", TRUE, "POLLER");
 	}
 
 	$poller_runs_completed++;
@@ -453,21 +483,21 @@
 		if ($poller_runs_completed < $poller_runs) {
 			list($micro, $seconds) = split(' ', microtime());
 			$plugin_start = $seconds + $micro;
-			api_plugin_hook('poller_bottom');
+			if ($poller_server_id['id'] == 2) {api_plugin_hook('poller_bottom');}
 			list($micro, $seconds) = split(' ', microtime());
 			$plugin_end = $seconds + $micro;
 			if (($sleep_time - ($plugin_end - $plugin_start)) > 0) {
 				usleep(($sleep_time - ($plugin_end - $plugin_start)) * 1000000);
 			}
-			api_plugin_hook('poller_top');
+			if ($poller_server_id['id'] == 2) {api_plugin_hook('poller_top');}
 		}
 	}else if (read_config_option('log_verbosity') >= POLLER_VERBOSITY_MEDIUM || $debug) {
-		cacti_log("WARNING: Cacti Polling Cycle Exceeded Poller Interval by " . $loop_end-$loop_start-$poller_interval . " seconds", TRUE, "POLLER");
+		cacti_log("WARNING: Pollerserver: ".$server_remote_name." WARNING: Cacti Polling Cycle Exceeded Poller Interval by " . $loop_end-$loop_start-$poller_interval . " seconds", TRUE, "POLLER");
 	}
 }
 
 function log_cacti_stats($loop_start, $method, $concurrent_processes, $max_threads, $num_hosts,
-	$hosts_per_process, $num_polling_items, $rrds_processed) {
+	$hosts_per_process, $num_polling_items, $rrds_processed, $id_from_pollerserver) {
 
 	/* take time and log performance data */
 	list($micro,$seconds) = explode(" ", microtime());
@@ -476,6 +506,7 @@
 	$cacti_stats = sprintf(
 		"Time:%01.4f " .
 		"Method:%s " .
+		"Server:%s " .
 		"Processes:%s " .
 		"Threads:%s " .
 		"Hosts:%s " .
@@ -484,6 +515,7 @@
 		"RRDsProcessed:%s",
 		round($loop_end-$loop_start,4),
 		$method,
+		gethostname(),
 		$concurrent_processes,
 		$max_threads,
 		$num_hosts,
@@ -494,9 +526,10 @@
 	cacti_log("STATS: " . $cacti_stats , true, "SYSTEM");
 
 	/* insert poller stats into the settings table */
-	db_execute("REPLACE INTO settings (name,value) VALUES ('stats_poller','$cacti_stats')");
+	$pollerserver_name = gethostname();
+	db_execute("UPDATE poller_server SET stats_poller = '$cacti_stats' WHERE name = '$pollerserver_name' AND aktive = 'on'");
 
-	api_plugin_hook_function('cacti_stats_update', array( round($loop_end-$loop_start,4), $method, $concurrent_processes, $max_threads, $num_hosts, $hosts_per_process, $num_polling_items, $rrds_processed));
+	if ($id_from_pollerserver == 2) {api_plugin_hook_function('cacti_stats_update', array( round($loop_end-$loop_start,4), $method, $concurrent_processes, $max_threads, $num_hosts, $hosts_per_process, $num_polling_items, $rrds_processed));}
 }
 
 function display_help() {
@@ -508,6 +541,6 @@
 	echo "    --debug|-d     Output debug information.  Similar to cacti's DEBUG logging level.\n\n";
 }
 
-api_plugin_hook('poller_bottom');
+if ($poller_server_id['id'] == 2) {api_plugin_hook('poller_bottom');}
 
 ?>
diff -ruBbd lib/api_poller.php plugins/multipollerserver/patches/lib/api_poller.php
--- lib/api_poller.php	2016-02-07 20:26:54.000000000 +0100
+++ plugins/multipollerserver/patches/lib/api_poller.php	2016-07-17 15:31:08.000000000 +0200
@@ -1,7 +1,8 @@
 <?php
+#Multipollerserver_checksumm=cacti_088h_multipollerserver_088h
 /*
  +-------------------------------------------------------------------------+
- | Copyright (C) 2004-2016 The Cacti Group                                 |
+ | Copyright (C) 2004-2015 The Cacti Group                                 |
  |                                                                         |
  | This program is free software; you can redistribute it and/or           |
  | modify it under the terms of the GNU General Public License             |
@@ -40,6 +41,7 @@
 		host.snmp_context,
 		host.snmp_port,
 		host.snmp_timeout,
+		host.poller_id,
 		host.disabled
 		from host
 		where host.id=$host_id");
@@ -76,6 +78,7 @@
 			$host["snmp_version"] = "";
 			$host["snmp_port"] = "";
 			$host["hostname"] = "None";
+			$host["poller_id"] = "";
 		}
 
 		if ($poller_action_id == 0) {
@@ -87,7 +90,7 @@
 
 		$rrd_next_step = api_poller_get_rrd_next_step($rrd_step, $num_rrd_items);
 
-		return "($local_data_id, " . "0, " . $host["id"] . ", $poller_action_id," . $cnn_id->qstr($host["hostname"]) . ",
+		return "($local_data_id, " . $host["poller_id"] . "," . $host["id"] . ", $poller_action_id," . $cnn_id->qstr($host["hostname"]) . ",
 			" . $cnn_id->qstr($host["snmp_community"])       . ", " . $cnn_id->qstr($host["snmp_version"])       . ", " . $cnn_id->qstr($host["snmp_timeout"]) . ",
 			" . $cnn_id->qstr($host["snmp_username"])        . ", " . $cnn_id->qstr($host["snmp_password"])      . ", " . $cnn_id->qstr($host["snmp_auth_protocol"]) . ",
 			" . $cnn_id->qstr($host["snmp_priv_passphrase"]) . ", " . $cnn_id->qstr($host["snmp_priv_protocol"]) . ", " . $cnn_id->qstr($host["snmp_context"]) . ",
diff -ruBbd lib/poller.php plugins/multipollerserver/patches/lib/poller.php
--- lib/poller.php	2016-02-07 20:26:54.000000000 +0100
+++ plugins/multipollerserver/patches/lib/poller.php	2016-07-17 15:30:58.000000000 +0200
@@ -1,7 +1,8 @@
 <?php
+#Multipollerserver_checksumm=cacti_088h_multipollerserver_088h
 /*
  +-------------------------------------------------------------------------+
- | Copyright (C) 2004-2016 The Cacti Group                                 |
+ | Copyright (C) 2004-2015 The Cacti Group                                 |
  |                                                                         |
  | This program is free software; you can redistribute it and/or           |
  | modify it under the terms of the GNU General Public License             |
@@ -327,6 +328,11 @@
 	/* let's count the number of rrd files we processed */
 	$rrds_processed = 0;
 
+$server_remote_name = gethostname();  
+	$poller_server_id = db_fetch_cell("SELECT id FROM poller_server WHERE name ='$server_remote_name' AND aktive = 'on'");
+
+
+
 	if ($remainder) {
 		$limit = "";
 	}else{
@@ -343,7 +349,7 @@
 		poller_item.rrd_name,
 		poller_item.rrd_num
 		from (poller_output,poller_item)
-		where (poller_output.local_data_id=poller_item.local_data_id and poller_output.rrd_name=poller_item.rrd_name)
+		where (poller_output.local_data_id=poller_item.local_data_id and poller_output.rrd_name=poller_item.rrd_name and poller_item.poller_id='$poller_server_id') 
 		order by poller_output.local_data_id
 		$limit");
 
